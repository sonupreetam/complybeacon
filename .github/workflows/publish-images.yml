# This file runs on push to main and v*.*.* tags, builds multi-arch, pushes to GHCR, attaches provenance + SBOM, and (optionally) Cosign signs via OIDC.
name: publish-images

on:
  push:
    branches: 
      - main
      - test-service-containers  # Your test branch
    tags: [ 'v*.*.*' ]
    paths:
      - '**/Dockerfile'
      - '.github/workflows/**'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  packages: write
  id-token: write        # for OIDC (attestations / cosign keyless)
  attestations: write    # publish provenance
  security-events: write # if you keep the Trivy SARIF step

jobs:
  detect-images:
    # Only run in your fork for testing
    if: github.repository == 'sonupreetam/complybeacon'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: mk-matrix
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATES=("beacon-distro" "truthbeam" "compass")
          entries=()
          for s in "${CANDIDATES[@]}"; do
            if [[ -f "$s/Dockerfile" ]]; then
              image="ghcr.io/complytime/complybeacon-${s}"
              entries+=( "{\"name\":\"${s}\",\"context\":\"./${s}\",\"image\":\"${image}\"}" )
            fi
          done
          while IFS= read -r d; do
            base="$(basename "$d")"
            if printf '%s\n' "${CANDIDATES[@]}" | grep -qx "$base"; then
              continue
            fi
            image="ghcr.io/complytime/complybeacon-${base}"
            entries+=( "{\"name\":\"${base}\",\"context\":\"./${base}\",\"image\":\"${image}\"}" )
          done < <(find . -maxdepth 2 -type f -name Dockerfile -not -path "./.github/*" -print0 | xargs -0 -n1 dirname | sed 's|^\./||' | sort -u)
          json="$(printf '{ "include": [ %s ] }' "$(IFS=,; echo "${entries[*]}")")"
          echo "matrix=${json}" >> "$GITHUB_OUTPUT"
          echo "Matrix: ${json}"

  build-and-push:
    needs: detect-images
    # Only run in the upstream repo (not forks) to prevent accidental publishing
    if: ${{ fromJSON(needs.detect-images.outputs.matrix).include[0] != null && github.repository == 'sonupreetam/complybeacon' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.detect-images.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Derive tags
        id: meta
        shell: bash
        run: |
          IMAGE="${{ matrix.image }}"
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
            echo "tags=${IMAGE}:${VERSION},${IMAGE}:latest" >> $GITHUB_OUTPUT
          else
            SHORT_SHA="${GITHUB_SHA::7}"
            echo "tags=${IMAGE}:latest,${IMAGE}:sha-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (multi-arch, SBOM + provenance)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=${{ matrix.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          provenance: true

      - name: Export digest
        id: digest
        run: echo "digest=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

      - name: Attest build provenance (GitHub Artifact Attestations)
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ matrix.image }}
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true

      # OPTIONAL: Keyless sign with Cosign (disable by removing this block)
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1
      - name: Cosign sign (keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes "${{ matrix.image }}@${{ steps.digest.outputs.digest }}"

      # OPTIONAL: Scan pushed image and upload SARIF to Security tab
      - name: Trivy scan (SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ matrix.image }}@${{ steps.digest.outputs.digest }}
          format: sarif
          output: trivy-results.sarif
          vuln-type: 'os,library'
          ignore-unfixed: true
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
